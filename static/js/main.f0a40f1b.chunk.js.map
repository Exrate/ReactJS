{"version":3,"sources":["actions/index.js","utils.js","reducers/patientReducer.js","reducers/index.js","reducers/activeTicketReducer.js","store.js","components/Navigation.js","components/Dashboard.js","patients/PatientList.js","components/Queue.js","patients/SpecialistType.js","patients/PatientForm.js","components/Registration.js","patients/PatientTable.js","components/Admin.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["MARK_AS_SERVICED","ADD_PATIENT","UPDATE_PATIENTS","UPDATE_PATIENTS_IN_SERVICE","SET_ACTIVE_TICKET","REMOVE_ACTIVE_TICKET","addPatient","patient","type","dateFormat","dateTimeFormat","initialState","groupBy","array","key","reduce","resultingArray","currentValue","push","filterPatientsDue","patients","filter","patientServiceDate","parse","serviceDate","utils","Date","compareAsc","combineReducers","state","action","newState","addedOn","format","index","servicedPatient","isServiced","patientsGroupedBySpecialist","x","specialist","filteredPatients","length","inServiceDate","activeTicket","persistConfig","storage","persistedReducer","persistReducer","reducers","useStyles","makeStyles","theme","appBar","zIndex","drawer","width","flexShrink","drawerPaper","toolbar","mixins","Navigation","classes","AppBar","position","className","Toolbar","Typography","variant","noWrap","Drawer","paper","List","ListItem","button","component","Link","to","ListItemIcon","Home","ListItemText","primary","PersonAdd","Divider","SupervisorAccount","Dashboard","this","props","dispatch","Paper","Box","p","gutterBottom","renderInQueue","formatDistanceToNow","addSuffix","Component","connect","root","maxWidth","backgroundColor","palette","background","inline","display","inService","fontWeight","PatientList","map","alignItems","Fragment","color","secondary","lastName","firstName","Queue","sortedPatients","sort","a","b","aServiceDate","bServiceDate","localeCompare","sortPatients","SpecialistType","Nurse","Surgeon","Psychiatrist","Cardiologist","Dermatologist","getInitialValues","birthDate","PatientForm","initialValues","onSubmit","values","setSubmitting","validationSchema","Yup","shape","required","formProps","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","setFieldValue","Grid","container","spacing","item","FormControl","TextField","error","helperText","name","placeholder","value","onBlur","onChange","DateFnsUtils","DatePicker","label","ampm","DateTimePicker","minDate","InputLabel","htmlFor","Select","MenuItem","Button","disabled","Registration","redirect","setRedirect","setState","renderRedirect","indexOf","bind","columns","field","title","PatientTable","data","actions","row","icon","onClick","_","handleServiced","options","filtering","actionsColumnIndex","Admin","markAsServiced","content","flexGrow","padding","Content","exact","path","rootStyle","App","fetchPatients","setInterval","updatePatientsInService","style","CssBaseline","fetch","then","response","json","updatePatients","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","persistor","persistStore","configureStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0a40f1b.chunk.js","sourcesContent":["export const MARK_AS_SERVICED = 'MARK_AS_SERVICED'\r\nexport const ADD_PATIENT = 'ADD_PATIENT'\r\nexport const UPDATE_PATIENTS = 'UPDATE_PATIENTS'\r\nexport const UPDATE_PATIENTS_IN_SERVICE = 'UPDATE_PATIENTS_IN_SERVICE'\r\nexport const SET_ACTIVE_TICKET = 'SET_ACTIVE_TICKET' \r\nexport const REMOVE_ACTIVE_TICKET = 'REMOVE_ACTIVE_TICKET' \r\n\r\nexport function setActiveTicket(index) {\r\n  return {\r\n    type: SET_ACTIVE_TICKET,\r\n    index\r\n  }\r\n}\r\n\r\nexport function removeActiveTicket(index) {\r\n  return {\r\n    type: REMOVE_ACTIVE_TICKET,\r\n    index\r\n  }\r\n}\r\n\r\nexport function markAsServiced(index) {\r\n  return {\r\n    type: MARK_AS_SERVICED,\r\n    index\r\n  };\r\n}\r\n\r\nexport function addPatient(patient) {\r\n  return {\r\n    type: ADD_PATIENT,\r\n    patient\r\n  };\r\n}\r\n\r\nexport function updatePatients(patients) {\r\n  return {\r\n    type: UPDATE_PATIENTS,\r\n    patients\r\n  }\r\n}\r\n\r\nexport function updatePatientsInService() {\r\n  return function(dispatch) {\r\n    return dispatch({\r\n      type: UPDATE_PATIENTS_IN_SERVICE\r\n    })\r\n  }\r\n}\r\n\r\nexport function fetchPatients() {\r\n  return function(dispatch) {\r\n    return fetch('http://localhost:9000/patients')\r\n      .then(response => response.json())\r\n      .then(patients => {\r\n        dispatch(updatePatients(patients))\r\n      })\r\n  }\r\n}","export const dateFormat = 'yyyy-MM-dd'\r\nexport const dateTimeFormat = 'yyyy-MM-dd HH:mm'","import { ADD_PATIENT, MARK_AS_SERVICED, UPDATE_PATIENTS, UPDATE_PATIENTS_IN_SERVICE } from '../actions'\r\nimport { format, parse, compareAsc } from 'date-fns'\r\nimport * as utils from '../utils'\r\n\r\nconst initialState = []\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_PATIENT:\r\n      const newState = [...state]\r\n      action.patient.addedOn = format(new Date(), utils.dateTimeFormat)\r\n      newState.push(action.patient)\r\n      return newState\r\n    case UPDATE_PATIENTS:\r\n      return action.patients\r\n    case MARK_AS_SERVICED:\r\n      if (state[action.index]) {\r\n        const newState = [...state]\r\n        const servicedPatient = newState[action.index]\r\n        servicedPatient.isServiced = true;\r\n        return newState;\r\n      }\r\n      break\r\n    case UPDATE_PATIENTS_IN_SERVICE:\r\n      const patientsGroupedBySpecialist = groupBy(state.filter(x => !x.isServiced), 'specialist')\r\n      for (let specialist in patientsGroupedBySpecialist) {\r\n        const filteredPatients = filterPatientsDue(patientsGroupedBySpecialist[specialist])\r\n\r\n        if (filteredPatients.length && !filteredPatients[0].inServiceDate) {\r\n          filteredPatients[0].inServiceDate = format(new Date(), utils.dateTimeFormat)\r\n        }\r\n      }\r\n      return [...state]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst groupBy = (array, key) => {\r\n  return array.reduce((resultingArray, currentValue) => {\r\n    (resultingArray[currentValue[key]] = resultingArray[currentValue[key]] || []).push(currentValue)\r\n    return resultingArray;\r\n  }, {});\r\n};\r\n\r\nconst filterPatientsDue = (patients) => {\r\n  return patients.filter(patient => {\r\n    const patientServiceDate = parse(patient.serviceDate, utils.dateTimeFormat, new Date())\r\n    const isPatientDue = compareAsc(patientServiceDate, new Date()) <= 0\r\n\r\n    return isPatientDue\r\n  });\r\n}","import { combineReducers } from 'redux'\r\nimport patientReducer from './patientReducer'\r\nimport activeTicketReducer from './activeTicketReducer'\r\n\r\nexport default combineReducers({\r\n  patients: patientReducer,\r\n  activeTicket: activeTicketReducer\r\n});","import { SET_ACTIVE_TICKET, REMOVE_ACTIVE_TICKET } from '../actions'\r\n\r\nconst initialState = -1\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_TICKET:\r\n      return action.index\r\n    case REMOVE_ACTIVE_TICKET:\r\n      return -1\r\n    default:\r\n      return state\r\n  }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst persistConfig = {\r\n  key: 'app-state',\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers)\r\n\r\nexport default () => {\r\n  let store = createStore(\r\n    persistedReducer, \r\n    applyMiddleware(thunk)\r\n  );\r\n  let persistor = persistStore(store);\r\n\r\n  return { store, persistor };\r\n}","import React from 'react';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Drawer,\r\n  List,\r\n  Divider,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  ListItemIcon\r\n} from '@material-ui/core'\r\nimport {\r\n  Home,\r\n  PersonAdd,\r\n  SupervisorAccount\r\n} from '@material-ui/icons'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  toolbar: theme.mixins.toolbar\r\n}));\r\n\r\nfunction Navigation() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Patient Portal\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}>\r\n        <div className={classes.toolbar} />\r\n        <List>\r\n          <ListItem button component={Link} to=\"/\">\r\n            <ListItemIcon><Home /></ListItemIcon>\r\n            <ListItemText primary=\"Dashboard\" />\r\n          </ListItem>\r\n          <ListItem button component={Link} to=\"/queue\">\r\n            <ListItemIcon><Home /></ListItemIcon>\r\n            <ListItemText primary=\"Queue\" />\r\n          </ListItem>\r\n          <ListItem button component={Link} to=\"/registration\">\r\n            <ListItemIcon><PersonAdd /></ListItemIcon>\r\n            <ListItemText primary={\"Registration\"} />\r\n          </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          <ListItem button component={Link} to=\"/admin\">\r\n            <ListItemIcon><SupervisorAccount /></ListItemIcon>\r\n            <ListItemText primary=\"Administration\" />\r\n          </ListItem>\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Typography, Paper, Box } from '@material-ui/core'\r\nimport { formatDistanceToNow, parse } from 'date-fns'\r\nimport * as utils from '../utils'\r\nimport { addPatient } from '../actions';\r\n\r\nclass Dashboard extends Component {\r\n  handleSubmit(patient) {\r\n    this.props.dispatch(addPatient(patient))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Paper>\r\n        <Box p={2}>\r\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\r\n            Dashboard\r\n          </Typography>\r\n          { this.props.activeTicket === -1\r\n          ? 'You are not currently in queue.'\r\n          : this.renderInQueue() }\r\n        </Box>\r\n      </Paper>\r\n    )\r\n  }\r\n\r\n  renderInQueue() {\r\n    if (this.props.patients.length > this.props.activeTicket) {\r\n      const patient = this.props.patients[this.props.activeTicket]\r\n      const serviceDate = formatDistanceToNow(parse(patient.serviceDate, utils.dateTimeFormat, new Date()), { addSuffix: true })\r\n      return (\r\n        <span>You are currently in queue. Your service time is scheduled for {patient.serviceDate} ({serviceDate}).</span>\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  activeTicket: state.activeTicket,\r\n  patients: state.patients\r\n});\r\n\r\nexport default connect(mapStateToProps)(Dashboard);","import PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { formatDistanceToNow, parse } from 'date-fns'\r\nimport React from 'react';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  Divider\r\n} from '@material-ui/core'\r\nimport * as utils from '../utils'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n  inService: {\r\n    fontWeight: '700'\r\n  }\r\n}));\r\n\r\nexport default function PatientList(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      {\r\n        props.patients.map((patient, index) => (\r\n          <div key={index}>\r\n            <ListItem alignItems=\"flex-start\">\r\n              <ListItemText\r\n                primary={\r\n                  <React.Fragment>\r\n                    <Typography\r\n                      component=\"span\"\r\n                      variant=\"body1\"\r\n                      className={`${patient.inServiceDate ? classes.inService : ''}`}\r\n                      color=\"textPrimary\"\r\n                    >\r\n                      {`${patient.specialist} ${patient.inServiceDate ? '(in service)' : ''}`}\r\n                    </Typography>\r\n                  </React.Fragment>}\r\n                secondary={\r\n                  <React.Fragment>\r\n                    <Typography\r\n                      component=\"span\"\r\n                      variant=\"body2\"\r\n                      className={classes.inline}\r\n                      color=\"textPrimary\"\r\n                    >\r\n                      {patient.lastName + ', ' + patient.firstName}\r\n                    </Typography>\r\n                    {` — ${formatDistanceToNow(parse(patient.serviceDate, utils.dateTimeFormat, new Date()), { addSuffix: true })}`}\r\n                  </React.Fragment>\r\n                }\r\n              />\r\n            </ListItem>\r\n            { props.patients.length - 1 !== index && props.patients[index + 1].specialist !== patient.specialist\r\n              ? <Divider variant=\"inset\" component=\"li\" />\r\n              : \"\"\r\n            }\r\n          </div>\r\n        ))\r\n      }\r\n    </List>\r\n  );\r\n}\r\n\r\nPatientList.propTypes = {\r\n  patients: PropTypes.array\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Typography, Paper, Box } from '@material-ui/core'\r\nimport { parse, compareAsc } from 'date-fns'\r\nimport PatientList from '../patients/PatientList'\r\nimport * as utils from '../utils'\r\n\r\nfunction sortPatients(patients) {\r\n  const sortedPatients = patients && patients.length ? [...patients] : []\r\n\r\n  sortedPatients.sort((a, b) => {\r\n    const aServiceDate = parse(a.serviceDate, utils.dateTimeFormat, new Date())\r\n    const bServiceDate = parse(b.serviceDate, utils.dateTimeFormat, new Date())\r\n\r\n    return a.specialist.localeCompare(b.specialist) || compareAsc(aServiceDate, bServiceDate)\r\n  })\r\n\r\n  return sortedPatients\r\n}\r\n\r\nclass Queue extends Component {\r\n  render() {\r\n    const sortedPatients = sortPatients(this.props.patients.filter(x => !x.isServiced))\r\n\r\n    return (\r\n      <Paper>\r\n        <Box p={2}>\r\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\r\n            Patients in queue\r\n          </Typography>\r\n          <PatientList patients={sortedPatients} />\r\n        </Box>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  patients: state.patients\r\n});\r\n\r\nexport default connect(mapStateToProps)(Queue);","export default class SpecialistType {\r\n  static Nurse = \"Nurse\"\r\n  static Surgeon = \"Surgeon\"\r\n  static Psychiatrist = \"Psychiatrist\"\r\n  static Cardiologist = \"Cardiologist\"\r\n  static Dermatologist = \"Dermatologist\"\r\n}","import PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { format } from 'date-fns'\r\nimport { Formik } from 'formik'\r\nimport { MuiPickersUtilsProvider, DateTimePicker, DatePicker } from '@material-ui/pickers'\r\nimport * as Yup from 'yup'\r\nimport React from 'react';\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  Button,\r\n  InputLabel\r\n} from '@material-ui/core'\r\nimport SpecialistType from './SpecialistType';\r\nimport * as utils from '../utils'\r\n\r\nconst getInitialValues = () => ({\r\n  firstName: '',\r\n  lastName: '',\r\n  specialist: SpecialistType.Nurse,\r\n  birthDate: format(new Date(), utils.dateFormat),\r\n  serviceDate: format(new Date(), utils.dateTimeFormat),\r\n  isServiced: false\r\n})\r\n\r\nexport default function PatientForm(props) {\r\n  return (\r\n    <Formik\r\n      initialValues={getInitialValues()}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setSubmitting(false)\r\n        props.onSubmit(values)\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        firstName: Yup.string()\r\n          .required('Required'),\r\n        lastName: Yup.string()\r\n          .required('Required'),\r\n      })}\r\n    >\r\n      {formProps => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          setFieldValue\r\n        } = formProps;\r\n        return (\r\n          <form onSubmit={handleSubmit}>\r\n            <Grid container spacing={3}>\r\n              <Grid item>\r\n                <FormControl>\r\n                  <TextField\r\n                    error={errors.firstName && touched.firstName}\r\n                    helperText={touched.firstName && errors.firstName}\r\n                    name=\"firstName\"\r\n                    placeholder=\"First name\"\r\n                    value={values.firstName}\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange} />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControl>\r\n                  <TextField\r\n                    error={errors.lastName && touched.lastName}\r\n                    helperText={touched.firstName && errors.lastName}\r\n                    name=\"lastName\"\r\n                    placeholder=\"Last name\"\r\n                    value={values.lastName}\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange} />\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n              <Grid item>\r\n                <FormControl>\r\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <DatePicker\r\n                      name=\"birthDate\"\r\n                      value={values.birthDate}\r\n                      label=\"Birth Date\"\r\n                      ampm={false}\r\n                      format={utils.dateFormat}\r\n                      onBlur={handleBlur}\r\n                      onChange={value => setFieldValue('birthDate', format(value, utils.dateFormat))}\r\n                    />\r\n                  </MuiPickersUtilsProvider>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControl>\r\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <DateTimePicker\r\n                      name=\"serviceDate\"\r\n                      value={values.serviceDate}\r\n                      label=\"Service Date\"\r\n                      ampm={false}\r\n                      minDate={new Date()}\r\n                      format={utils.dateTimeFormat}\r\n                      onBlur={handleBlur}\r\n                      onChange={value => setFieldValue('serviceDate', format(value, utils.dateTimeFormat))}\r\n                    />\r\n                  </MuiPickersUtilsProvider>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n              <Grid item>\r\n                <FormControl>\r\n                  <InputLabel htmlFor=\"specialist\">Specialist</InputLabel>\r\n                  <Select\r\n                    name=\"specialist\"\r\n                    value={values.specialist}\r\n                    onChange={handleChange}>\r\n                    <MenuItem value={SpecialistType.Nurse}>{SpecialistType.Nurse}</MenuItem>\r\n                    <MenuItem value={SpecialistType.Surgeon}>{SpecialistType.Surgeon}</MenuItem>\r\n                    <MenuItem value={SpecialistType.Psychiatrist}>{SpecialistType.Psychiatrist}</MenuItem>\r\n                    <MenuItem value={SpecialistType.Cardiologist}>{SpecialistType.Cardiologist}</MenuItem>\r\n                    <MenuItem value={SpecialistType.Dermatologist}>{SpecialistType.Dermatologist}</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n              <Grid item>\r\n                <Button type=\"submit\" disabled={isSubmitting} variant=\"contained\" color=\"primary\">Submit</Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nPatientForm.propTypes = {\r\n  onSubmit: PropTypes.func\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom'\r\nimport PatientForm from '../patients/PatientForm';\r\nimport { Typography, Paper, Box } from '@material-ui/core'\r\nimport { addPatient, setActiveTicket } from '../actions';\r\n\r\nclass Registration extends Component {\r\n  state = {\r\n    redirect: false\r\n  }\r\n\r\n  setRedirect = () => {\r\n    this.setState({\r\n      redirect: true\r\n    })\r\n  }\r\n\r\n  handleSubmit(patient) {\r\n    this.props.dispatch(addPatient(patient))\r\n    this.props.dispatch(setActiveTicket(this.props.patients.indexOf(patient)))\r\n    \r\n    this.setRedirect()\r\n  }\r\n\r\n  renderRedirect = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to='/' />\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Paper>\r\n        <Box p={2}>\r\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\r\n            Registration\r\n          </Typography>\r\n          <PatientForm onSubmit={this.handleSubmit.bind(this)} />\r\n        </Box>\r\n        { this.renderRedirect() }\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  activeTicket: state.activeTicket,\r\n  patients: state.patients\r\n});\r\n\r\nexport default connect(mapStateToProps)(Registration);","import PropTypes from 'prop-types'\r\nimport React from 'react'\r\nimport MaterialTable from 'material-table'\r\n\r\nconst columns = [\r\n  { field: 'firstName', title: 'First Name' },\r\n  { field: 'lastName', title: 'Last Name' },\r\n  { field: 'specialist', title: 'Specialist' },\r\n  { field: 'birthDate', title: 'Birth Date' },\r\n  { field: 'serviceDate', title: 'Service Date' },\r\n  { field: 'addedOn', title: 'Registered On' }\r\n]\r\n\r\nexport default function PatientTable(props) {\r\n  return (\r\n    <MaterialTable\r\n      columns={columns}\r\n      data={props.patients}\r\n      title=\"Patients\"\r\n      actions={[\r\n        row => ({\r\n          icon: 'done',\r\n          onClick: (_, row) => props.handleServiced(row, props.patients.indexOf(row)),\r\n          disabled: row.isServiced\r\n        })\r\n      ]}\r\n      options={{\r\n        filtering: true,\r\n        actionsColumnIndex: -1\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nPatientTable.propTypes = {\r\n  handleServiced: PropTypes.func,\r\n  patients: PropTypes.array\r\n};\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { markAsServiced } from '../actions'\r\nimport { parse, compareAsc } from 'date-fns'\r\nimport PatientTable from '../patients/PatientTable'\r\nimport * as utils from '../utils'\r\n\r\nfunction sortPatients(patients) {\r\n  let sortedPatients = [...patients]\r\n\r\n  sortedPatients.sort((a, b) => {\r\n    const aServiceDate = parse(a.serviceDate, utils.dateTimeFormat, new Date())\r\n    const bServiceDate = parse(b.serviceDate, utils.dateTimeFormat, new Date())\r\n    return compareAsc(aServiceDate, bServiceDate)\r\n  })\r\n\r\n  return sortedPatients\r\n}\r\n\r\nclass Admin extends Component {\r\n  handleServiced = (patient, index) => {\r\n    this.props.dispatch(markAsServiced(index))\r\n  }\r\n\r\n  render() {\r\n    this.props.patients.sort((a, b) => {\r\n      const aServiceDate = parse(a.serviceDate, utils.dateTimeFormat, new Date())\r\n      const bServiceDate = parse(b.serviceDate, utils.dateTimeFormat, new Date())\r\n      return compareAsc(aServiceDate, bServiceDate)\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        <PatientTable patients={sortPatients(this.props.patients)} handleServiced={this.handleServiced.bind(this)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  patients: state.patients\r\n});\r\n\r\nexport default connect(mapStateToProps)(Admin);","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Route } from 'react-router-dom'\r\nimport Dashboard from './Dashboard'\r\nimport Queue from './Queue'\r\nimport Registration from './Registration'\r\nimport Admin from './Admin'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n}))\r\n\r\nexport default function Content() {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <main className={classes.content}>\r\n      <div className={classes.toolbar} />\r\n      <Route exact path=\"/\" component={Dashboard} />\r\n      <Route path=\"/queue\" component={Queue} />\r\n      <Route path=\"/registration\" component={Registration} />\r\n      <Route path=\"/admin\" component={Admin} />\r\n    </main>\r\n  )\r\n}","import React, { Component } from 'react'\nimport { BrowserRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { CssBaseline } from '@material-ui/core'\nimport { fetchPatients, updatePatientsInService } from './actions'\nimport Navigation from './components/Navigation'\nimport Content from './components/Content'\nimport './App.css'\n\nconst rootStyle = {\n  display: 'flex'\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchPatients()\n\n    setInterval(() => {\n      this.props.updatePatientsInService()\n    }, 1000)\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div style={rootStyle}>\n          <CssBaseline />\n          <Navigation />\n          <Content />\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n})\n\nexport default connect(mapStateToProps, { fetchPatients, updatePatientsInService })(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport configureStore from \"./store\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst { store, persistor } = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}